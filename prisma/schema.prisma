// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id           Int         @id @default(autoincrement())
  title        String      @unique
  slug         String      @unique
  contentUrl   String
  cloudId      String
  thumbnailUrl String      @default("/defaultThumbnail.webp")
  thumbnailId  String?
  owner        User        @relation(fields: [ownerId], references: [id])
  ownerId      Int
  comments     Comment[]   @relation("PostComments")
  createdAt    DateTime    @default(now())
  views        Int         @default(0)
  userLikes    postLikes[]
  readtimeMin  Int
  published    Boolean     @default(false)
  categories   PostCategory[]
  lang         Lang         @default(ES)
}

model User {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  password      String
  role          Role           @default(USER)
  comments      Comment[]      @relation("UserComments")
  posts         Post[]
  likedPosts    postLikes[]
  likedComments commentLikes[]
  createdAt     DateTime       @default(now())
}

model Comment {
  id         Int            @id @default(autoincrement())
  content    String
  userLikes  commentLikes[]
  owner      User           @relation("UserComments", fields: [ownerId], references: [id])
  ownerId    Int
  parentPost Post           @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
  createdAt  DateTime       @default(now())
}

model postLikes {
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int
  user    User     @relation(fields: [userId], references: [id])
  userId  Int
  likedAt DateTime @default(now())

  @@id([postId, userId])
}

model commentLikes {
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  likedAt   DateTime @default(now())

  @@id([commentId, userId])
}

model Category {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  posts PostCategory[]
}

model PostCategory {
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  category  Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int

  @@id([postId, categoryId])
}

enum Role {
  ADMIN
  USER
}

enum Lang {
  ES 
  EN
}
